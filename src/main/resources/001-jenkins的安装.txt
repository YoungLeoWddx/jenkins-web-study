1，官网https://jenkins.io/download/下载jenkins.war，jenkins是一个web应用程序，需要web容器的支持。

2，部署到windows的tomcat的webapp下面，这样就可以通过http://localhost:8080/jenkins来访问jenkins应用程序了，启动window上的tomcat来访问。

3，首次启动jenkins会有一些初始化工作，根据页面提示操作即可，登录jenkins后，首次安装jenkins推荐的自定义插件。

4，首次安装完毕jenkins之后，创建首个jenkins用户，admin，密码，admin，全名，管理员，邮箱，773958125@qq.com

5，登陆之后，点击系统管理，如果提示有插件依赖错误，先解决错误。

6，配置构建需要用到的jdk版本和maven版本
	点击global tool configuration，都是用本机安装，由于我们使用的是windows下运行jenkins，所以，都用windows的jdk home和maven home配置。

7，邮件通知配置(全局)
	在http://updates.jenkins-ci.org/download/plugins/搜索安装email-ext（Email Extension Plugin）插件，
	安装方式参考第5步骤。
	系统设置找到   系统管理员邮件地址，这里设置为：773958125@qq.com（这里一定要设置，否则无法发送邮件）
	在系统设置找到Extended E-mail Notification，
		SMTP server	: smtp.qq.com
		User Name : 773958125@qq.com    （不知道为什么，每次打开系统设置，这个地方和下面的密码都要被重置位admin，需要重新设置）
		password : tcyzdmaeskwjbfdb
		use ssl : true
		smtp port : 465
		charset : UTF-8
		Default Content Type : HTML(text/html)
		Default Recipients : 19421598@qq.com   （可以设置多个默认收件人，用逗号隔开）
		Default Subject : $PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS!  （邮件的标题）
 		Default Content :
		<!DOCTYPE html>  
		<html>  
		<head>  
		<meta charset="UTF-8">  
		<title>${ENV, var="JOB_NAME"}-第${BUILD_NUMBER}次构建日志</title>  
		</head>  
		  
		<body leftmargin="8" marginwidth="0" topmargin="8" marginheight="4"  
		    offset="0">  
		    <table width="95%" cellpadding="0" cellspacing="0"  
		        style="font-size: 12pt; font-family: Tahoma, Arial, Helvetica, sans-serif">  
		        <tr>  
		            <td>(本邮件是Jenkins程序自动下发的，请勿回复！)</td>  
		        </tr>  
		        <tr>  
		            <td><h2>  
		                    <font color="#0000FF">构建结果 - ${BUILD_STATUS}!</font>  
		                </h2></td>  
		        </tr>  
		        <tr>  
		            <td><br />  
		            <b><font color="#0B610B">构建信息</font></b>  
		            <hr size="2" width="100%" align="center" /></td>  
		        </tr>  
		        <tr>  
		            <td>  
		                <ul>  
		                    <li>项目名称 ： ${PROJECT_NAME}</li>  
		                    <li>构建编号 ： 第${BUILD_NUMBER}次构建</li>  
		                    <li>GIT版本： ${GIT_REVISION}</li>        
		                    <li>触发原因： ${CAUSE}</li>  
		                    <li>构建日志： <a href="${BUILD_URL}console">${BUILD_URL}console</a></li>  
		                    <li>构建  Url ： <a href="${BUILD_URL}">${BUILD_URL}</a></li>  
		                    <li>工作目录 ： <a href="${PROJECT_URL}ws">${PROJECT_URL}ws</a></li>  
		                    <li>项目  Url ： <a href="${PROJECT_URL}">${PROJECT_URL}</a></li>  
		                </ul>  
		            </td>  
		        </tr>  
		        <tr>  
		            <td><b><font color="#0B610B">Changes Since Last  
		                        Successful Build:</font></b>  
		            <hr size="2" width="100%" align="center" /></td>  
		        </tr>  
		        <tr>  
		            <td>  
		                <ul>  
		                    <li>历史变更记录 : <a href="${PROJECT_URL}changes">${PROJECT_URL}changes</a></li>  
		                </ul> ${CHANGES_SINCE_LAST_SUCCESS,reverse=true, format="Changes for Build #%n:<br />%c<br />",showPaths=true,changesFormat="<pre>提交变更者:[%a]<br/>提交message:%m<br/>提交时间:%d</pre>",pathFormat="    %p"}  
		            </td>  
		        </tr>  
		        <tr>  
		            <td><b><font color="#0B610B">Failed Test Results:</font></b> 
		            <hr size="2" width="100%" align="center" /></td>  
		        </tr> 
		        <tr>  
		            <td>
		            	<pre  
		                    style="font-size: 11pt; font-family: Tahoma, Arial, Helvetica, sans-serif">$FAILED_TESTS</pre>  
		                <br /></td>  
		        </tr>  
		        <tr>  
		            <td><b><font color="#0B610B">构建日志 (最后 100行):</font></b>  
		            <hr size="2" width="100%" align="center" /></td>  
		        </tr>  
		        <tr>  
		            <td>Test Logs (if test has ran): <a  
		                href="${PROJECT_URL}ws/TestResult/archive_logs/Log-Build-${BUILD_NUMBER}.zip">${PROJECT_URL}/ws/TestResult/archive_logs/Log-Build-${BUILD_NUMBER}.zip</a>  
		                <br />  
		            <br />  
		            </td>  
		        </tr>
		        <tr>  
		            <td><textarea cols="80" rows="30" readonly="readonly"  
		                    style="font-family: Courier New">${BUILD_LOG, maxLines=100}</textarea>  
		            </td>  
		        </tr>  
		    </table>  
		</body>  
		</html>  
		
		Default Triggers: Failure - Any，Success，Unstable (Test Failures)
	
8，安装git，svn插件，（在推荐安装里面都已经安装了，Git plugin和Subversion Plug-in），不用重复安装。

9，新建一个作业
	1，页面点击 新建，project name输入jenkins-web-study，选择构建一个自由free-style风格的项目。
	2，选择源码管理种的源代码的源，这里选择github上面的源代码。所以，这里选择git。	Repository URL输入，https://github.com/YoungLeoWddx/jenkins-web-study，Credentials为none。
	3，选择构建触发的条件，poll scm，它的意思是，定时检查版本库，发现有新的提交就触发构建。这种方式对git、SVN等所有版本管理系统都是通用的。在日程表输入五个 * * * * *，这是一种时间格式，代表任何时间都可以。
	4，在构建种选择maven构建，Invoke top-level Maven targets，版本默认maven，Goals 填入clean package，这是maven的构建步骤。
	5,继续添加一个maven构建的步骤，Invoke top-level Maven targets，版本默认maven，Goals填入javadoc:javadoc。
	6，构建后添加一个publish junit test result report,测试报告xml填上，**/target/surefire-reports/*.xml，允许空的测试。
	7，点击保存。点击保存后，每隔1分钟，jenkins都会去github上轮询master分支是否有变更，如果有变更，那么，进行maven的clean package动作。
	8，可以在页面上观察构建的过程和输出，详见Jenkins权威指南51页。如果构建成功，构建历史种显示蓝色的球，否则显示红色的球。
	
10，安装Cobertura Plugin，这是一个代码覆盖率度量的插件。他是一个非常有用的工具，可以用来记录和显示生成的代码覆盖率度量。安装完重启Jenkins。
	然后，在第9步中的5步骤中间再加上一个maven步骤，goals填写，cobertura:cobertura -Dcobertura.report.format=xml.配置publish Cobertura Coverage report为**/target/site/cobertura/coverage.xml
	（Cobertura既有html格式的输出也有xml格式输出，而jekines使用的是xml格式）
	然后，再来构建，就可以在项目视图种显示测试结果趋势和Code Coverage了。
	
11，在linux下安装jenkins参考其他教程。